extends ../templates/contents.pug

block headVars
    - var title = "Software"
    //- - var tagline = "A sample page for the theme."
    - var requireMathJax = true

block article
    :markdown-it(html)

        # Purpose of Our Software

        The goal of Storagene is to store information on DNA.
        To do this, we first need to encode information in form of a base sequence.
        Even more importantly, we need to be able to decode a sequenced DNA strand to recover the original information.
        These two tasks are performed by our software.
        The main focus lies on error correction in the decoding process.
        Many errors can occur during DNA synthesis and sequencing.
        By utilizing the peculiarities of our semi-specific synthesis in combination with the capabilities of nanopore sequencing, we will be able to robustly decode information from DNA.
        This plays an important role in making this technique easier to use and thus accessible to everyone.
        Our software addresses a problem that is not very common today. However, it has the potential to become a standard tool of bioinformatics when DNA data storage eventually becomes a commonplace technique.

        # Overview

        Our software is written in Python.
        Right now, it consists of a program library and a command line tool that utilizes the library.
        The command line tool makes all the basic functionalities of our library available, namely encoding and decoding information.
        In addition, it would be possible to implement a graphical user interface, which would make the usage even easier for everyone.

        In the following, the two functions of our software encoding and decoding are explained in detail.
        It will become clear how we are able to store information on DNA, although our synthesis approach is semi-specific.
        We will also discuss the challenges that arise when decoding information.

        # Encoding Information on DNA

    - var imgpath = "" + require("../assets/img/Software/encoding.svg")["default"]
    +image(1, imgpath, "Overview over the steps needed for encoding data into DNA.")

    :markdown-it(html)

        ## Changes of Nucleotides as Information Carriers

        Our DNA synthesis is semi-specific, meaning that we cannot control how many nucleotides are attached in each step.
        This means that we will always have chunks of unknown length of each nucleotide, e.g. "AAACCCCCAAAAAGGGG".
        These chunks are also called homonucleotides.
        Nevertheless, to be able to encode information in this, we are using a rather unusual encoding scheme.
        Instead of encoding one bit of information to each base pair, we are encoding information in each change of bases.
        For example, the change from a homonucleotide of **A**s to a homonucleotide of **C**s could encode a `1`.

        ## Using a Ternary Code

        From each homonucleotide, three other homonucleotides are reachable.
        From "A" we can go to "C", "G", and "T".
        From "C" we can go to "A", "G", and "T", and so on.
        So, to be able to use all possible combinations, we do not need a binary code, but a ternary code.
        Computers work with a binary code, meaning that every information is encoded in bits.
        Each bit can either be `0` or `1`.
        Instead, in our ternary code information is encoded in trits.
        Each trit can have the states `0`, `1`, or `2`.

        ## Converting form Binary to Ternary

        Our software is able to encode arbitrary files into DNA strands.
        Therefore, the first step is to convert binary information into ternary information.
        Computers work with bytes, so chunks of eight bits.
        Hence, it is natural to first split the string of bits we get from a file into bytes.
        Then, the software converts each byte into trits.
        
        The count of values a number can take is calculated by the formula $b^l$.
        In this $b$ is the base of the number system, e.g., '2' for the binary system, and$^l$ is the number of digits.
        Since a byte consists of eight bits with two states each, every byte can have $2^8=256$ states.
        To represent the information of one byte with trits, we need enough trits to represent atleast $256$ different states.
        Five trits can represent $243$ states, since $3^5=243$.
        So obviously, five trits are not enough to encode one byte.
        Six trits, in contrast, represent $3^6=729$ states.
        So one byte can be encoded with six trits.
        In the following, we will call a sequence of six trits a tryte.
        However, this also shows that converting one byte into one tryte is extremely inefficient.
        $\frac{256}{729} \approx 35.12$%, so roughly one third of the actual capacity of this code is actually used.
        That means that two third of the possible combinations of trits are never used.

        ## Converting Number Systems More Efficiently

        Instead of converting eight bits into six trits, it is also possible to cut up the original data differently.
        In the best case, this can lead to a more efficient conversion.
        For example, three bits could be converted into two trits.
        Since $2^3=8$ and $3^2=9$, $\frac{8}{9}$ or 89% of the maximum capacity are actually used.
        And even more efficient conversion would be from eleven bits to seven trits with a capacity of 94%.
        However, both of these conversions would also require some additional computation.
        Arbitrary bit strings usually cannot be divided into chunks of three or eleven bits.
        Therefore, the last chunk would need to be padded with bits.
        This means that the encoded information also needs to contain the information of how many bits were padded to the end.
        Due to this additional complexity, other conversions than from byte to tryte are not implemented in our software right now.

        # Decoding Information from Sequencing Data

    - var imgpath = "" + require("../assets/img/Software/decoding.svg")["default"]
    +image(2, imgpath, "Overview over the steps for retrieving information from DNA.")
